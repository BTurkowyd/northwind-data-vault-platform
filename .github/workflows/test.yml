name: Pytest ➝ Deploy to AWS and Snowflake -> Run The Data Vault + Marts DBT Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  SNOWFLAKE_EXTERNAL_ID: ${{ secrets.SNOWFLAKE_EXTERNAL_ID }}
  SNOWFLAKE_ACCOUNT_ARN: ${{ secrets.SNOWFLAKE_ACCOUNT_ARN }}
  ATHENA_STAGING_DIR: ${{ secrets.ATHENA_STAGING_DIR }}
  SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
  SNOWFLAKE_ACCOUNT_NAME: ${{ secrets.SNOWFLAKE_ACCOUNT_NAME }}
  SNOWFLAKE_ORGANIZATION_NAME: ${{ secrets.SNOWFLAKE_ORGANIZATION_NAME }}
  SNOWFLAKE_PRIVATE_KEY: ${{ secrets.SNOWFLAKE_PRIVATE_KEY }}
  SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
  SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}

jobs:
  test-and-plan:
    name: Pytest ➝ Terragrunt Plan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Install dev dependencies with uv
        run: uv pip install --system -r requirements-dev.txt

      - name: Run Pytest
        run: pytest

      - name: Check AWS CLI version
        run: aws --version

      - name: Install tenv v4.4.0
        run: |
          curl -O -L "https://github.com/tofuutils/tenv/releases/download/v4.4.0/tenv_v4.4.0_amd64.deb"
          sudo dpkg -i "tenv_v4.4.0_amd64.deb"
          tenv --version

      - name: Install OpenTofu and Terragrunt
        run: |
          tenv tg install 0.75.9
          tenv tofu install 1.9.0

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: eu-central-1

      - name: Run Terragrunt Init on AWS infrastructure
        run: terragrunt init
        working-directory: terragrunt/dev/aws

      - name: Run Terragrunt Plan on AWS infrastructure
        run: terragrunt plan
        working-directory: terragrunt/dev/aws

      - name: Run Terragrunt Apply on AWS infrastructure
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: terragrunt apply -auto-approve
        working-directory: terragrunt/dev/aws

      - name: Run Terragrunt Init on Snowflake infrastructure
        run: terragrunt init
        working-directory: terragrunt/dev/snowflake

      - name: Run Terragrunt Plan on Snowflake infrastructure
        run: terragrunt plan
        working-directory: terragrunt/dev/snowflake

      - name: Run Terragrunt Apply on Snowflake infrastructure
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: terragrunt apply -auto-approve

      - name: Get Glue Job Name
        run: echo "GLUE_JOB_NAME=$(terragrunt output -raw glue_job_name)" >> $GITHUB_ENV
        working-directory: terragrunt/dev/aws

      - name: Trigger Glue Job
#        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          RUN_ID=$(aws glue start-job-run --job-name "$GLUE_JOB_NAME" --query 'JobRunId' --output text)
          echo "Waiting for Glue job to complete (RunId: $RUN_ID)..."

      - name: Wait for Glue Job to complete
#        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          # Poll until job finishes
          STATUS="RUNNING"
          while [ "$STATUS" = "RUNNING" ] || [ "$STATUS" = "STARTING" ] || [ "$STATUS" = "STOPPING" ]; do
            echo "Current status: $STATUS... waiting 5s"
            sleep 5
            STATUS=$(aws glue get-job-run --job-name "$GLUE_JOB_NAME" --run-id "$RUN_ID" --query 'JobRun.JobRunState' --output text)
          done

          echo "Final status: $STATUS"

          if [ "$STATUS" != "SUCCEEDED" ]; then
            echo "Glue job failed with status: $STATUS"
            exit 1
          else
            echo "Glue job completed successfully."
          fi

      - name: Run Data Vault + Marts DBT Pipeline
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: make aws-dbt LOCAL=false

      - name: Run Marts migration to Snowflake
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: make snowflake-dbt LOCAL=false
